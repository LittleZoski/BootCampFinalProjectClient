/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: message.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
import * as grpc_web_1 from "grpc-web";
export class MessageRequest extends pb_1.Message {
    _one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        roomId?: number;
        message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this._one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("roomId" in data && data.roomId != undefined) {
                this.roomId = data.roomId;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
        }
    }
    get roomId() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set roomId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        roomId?: number;
        message?: string;
    }): MessageRequest {
        const message = new MessageRequest({});
        if (data.roomId != null) {
            message.roomId = data.roomId;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        return message;
    }
    toObject() {
        const data: {
            roomId?: number;
            message?: string;
        } = {};
        if (this.roomId != null) {
            data.roomId = this.roomId;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.roomId != 0)
            writer.writeInt32(1, this.roomId);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.roomId = reader.readInt32();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MessageRequest {
        return MessageRequest.deserialize(bytes);
    }
}
export class MessageResponse extends pb_1.Message {
    _one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: Uint8Array;
        message?: string;
        userId?: number;
        createdAt?: dependency_1.Timestamp;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this._one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("userId" in data && data.userId != undefined) {
                this.userId = data.userId;
            }
            if ("createdAt" in data && data.createdAt != undefined) {
                this.createdAt = data.createdAt;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
    }
    set id(value: Uint8Array) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get userId() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set userId(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get createdAt() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 4) as dependency_1.Timestamp;
    }
    set createdAt(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get hasCreatedAt() {
        return pb_1.Message.getField(this, 4) != null;
    }
    static fromObject(data: {
        id?: Uint8Array;
        message?: string;
        userId?: number;
        createdAt?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
    }): MessageResponse {
        const message = new MessageResponse({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.userId != null) {
            message.userId = data.userId;
        }
        if (data.createdAt != null) {
            message.createdAt = dependency_1.Timestamp.fromObject(data.createdAt);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: Uint8Array;
            message?: string;
            userId?: number;
            createdAt?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.userId != null) {
            data.userId = this.userId;
        }
        if (this.createdAt != null) {
            data.createdAt = this.createdAt.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeBytes(1, this.id);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (this.userId != 0)
            writer.writeInt32(3, this.userId);
        if (this.hasCreatedAt)
            writer.writeMessage(4, this.createdAt, () => this.createdAt.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readBytes();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                case 3:
                    message.userId = reader.readInt32();
                    break;
                case 4:
                    reader.readMessage(message.createdAt, () => message.createdAt = dependency_1.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MessageResponse {
        return MessageResponse.deserialize(bytes);
    }
}
export abstract class UnimplementedMessageService {
    static definition = {
        GetMessages: {
            path: "/grpc.message.Message/GetMessages",
            requestStream: false,
            responseStream: true,
            requestSerialize: (message: MessageRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => MessageRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: MessageResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => MessageResponse.deserialize(new Uint8Array(bytes))
        },
        SendMessage: {
            path: "/grpc.message.Message/SendMessage",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: MessageRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => MessageRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: MessageResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => MessageResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract GetMessages(call: grpc_1.ServerWritableStream<MessageRequest, MessageResponse>): void;
    abstract SendMessage(call: grpc_1.ServerUnaryCall<MessageRequest, MessageResponse>, callback: grpc_1.sendUnaryData<MessageResponse>): void;
}
export class MessageClient {
    private _address: string;
    private _client: grpc_web_1.GrpcWebClientBase;
    constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
        if (!options)
            options = {};
        options.format = options.format || "text";
        this._address = address;
        this._client = new grpc_web_1.GrpcWebClientBase(options);
    }
    private static GetMessages = new grpc_web_1.MethodDescriptor<MessageRequest, MessageResponse>("/grpc.message.Message/GetMessages", grpc_web_1.MethodType.SERVER_STREAMING, MessageRequest, MessageResponse, (message: MessageRequest) => message.serialize(), MessageResponse.deserialize);
    GetMessages(message: MessageRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.serverStreaming(this._address + "/grpc.message.Message/GetMessages", message, metadata || {}, MessageClient.GetMessages);
    }
    private static SendMessage = new grpc_web_1.MethodDescriptor<MessageRequest, MessageResponse>("/grpc.message.Message/SendMessage", grpc_web_1.MethodType.UNARY, MessageRequest, MessageResponse, (message: MessageRequest) => message.serialize(), MessageResponse.deserialize);
    SendMessage(message: MessageRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: MessageResponse) => void) {
        return this._client.rpcCall<MessageRequest, MessageResponse>(this._address + "/grpc.message.Message/SendMessage", message, metadata || {}, MessageClient.SendMessage, callback);
    }
}
